{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":91717,"databundleVersionId":12184666,"sourceType":"competition"}],"dockerImageVersionId":31040,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import accuracy_score, top_k_accuracy_score\nfrom joblib import dump\nfrom sklearn.preprocessing import LabelEncoder\nimport numpy as np","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-11T13:50:20.124614Z","iopub.execute_input":"2025-06-11T13:50:20.124916Z","iopub.status.idle":"2025-06-11T13:50:20.130334Z","shell.execute_reply.started":"2025-06-11T13:50:20.124896Z","shell.execute_reply":"2025-06-11T13:50:20.129173Z"}},"outputs":[],"execution_count":57},{"cell_type":"code","source":"# Read files\ntrain_csv = pd.read_csv('/kaggle/input/playground-series-s5e6/train.csv')\ntest_csv = pd.read_csv('/kaggle/input/playground-series-s5e6/test.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-11T14:22:07.338081Z","iopub.execute_input":"2025-06-11T14:22:07.338480Z","iopub.status.idle":"2025-06-11T14:22:08.223687Z","shell.execute_reply.started":"2025-06-11T14:22:07.338457Z","shell.execute_reply":"2025-06-11T14:22:08.222626Z"}},"outputs":[],"execution_count":118},{"cell_type":"code","source":"train_df = train_csv.drop(columns=['id'], errors='ignore')\ntest_df = test_csv.drop(columns=['id'], errors='ignore')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-11T14:22:08.225079Z","iopub.execute_input":"2025-06-11T14:22:08.225359Z","iopub.status.idle":"2025-06-11T14:22:08.254864Z","shell.execute_reply.started":"2025-06-11T14:22:08.225331Z","shell.execute_reply":"2025-06-11T14:22:08.253791Z"}},"outputs":[],"execution_count":119},{"cell_type":"markdown","source":"## EDA","metadata":{}},{"cell_type":"code","source":"print(train_df.shape) \nprint(train_df.dtypes)    ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-11T14:22:08.511141Z","iopub.execute_input":"2025-06-11T14:22:08.511519Z","iopub.status.idle":"2025-06-11T14:22:08.517737Z","shell.execute_reply.started":"2025-06-11T14:22:08.511497Z","shell.execute_reply":"2025-06-11T14:22:08.516700Z"}},"outputs":[{"name":"stdout","text":"(750000, 9)\nTemparature         int64\nHumidity            int64\nMoisture            int64\nSoil Type          object\nCrop Type          object\nNitrogen            int64\nPotassium           int64\nPhosphorous         int64\nFertilizer Name    object\ndtype: object\n","output_type":"stream"}],"execution_count":120},{"cell_type":"code","source":"train_df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-11T14:16:37.617815Z","iopub.execute_input":"2025-06-11T14:16:37.618149Z","iopub.status.idle":"2025-06-11T14:16:37.629040Z","shell.execute_reply.started":"2025-06-11T14:16:37.618125Z","shell.execute_reply":"2025-06-11T14:16:37.628006Z"}},"outputs":[{"execution_count":108,"output_type":"execute_result","data":{"text/plain":"   Temparature  Humidity  Moisture Soil Type  Crop Type  Nitrogen  Potassium  \\\n0           37        70        36    Clayey  Sugarcane        36          4   \n1           27        69        65     Sandy    Millets        30          6   \n2           29        63        32     Sandy    Millets        24         12   \n3           35        62        54     Sandy     Barley        39         12   \n4           35        58        43       Red      Paddy        37          2   \n\n   Phosphorous Fertilizer Name  \n0            5           28-28  \n1           18           28-28  \n2           16        17-17-17  \n3            4        10-26-26  \n4           16             DAP  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Temparature</th>\n      <th>Humidity</th>\n      <th>Moisture</th>\n      <th>Soil Type</th>\n      <th>Crop Type</th>\n      <th>Nitrogen</th>\n      <th>Potassium</th>\n      <th>Phosphorous</th>\n      <th>Fertilizer Name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>37</td>\n      <td>70</td>\n      <td>36</td>\n      <td>Clayey</td>\n      <td>Sugarcane</td>\n      <td>36</td>\n      <td>4</td>\n      <td>5</td>\n      <td>28-28</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>27</td>\n      <td>69</td>\n      <td>65</td>\n      <td>Sandy</td>\n      <td>Millets</td>\n      <td>30</td>\n      <td>6</td>\n      <td>18</td>\n      <td>28-28</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>29</td>\n      <td>63</td>\n      <td>32</td>\n      <td>Sandy</td>\n      <td>Millets</td>\n      <td>24</td>\n      <td>12</td>\n      <td>16</td>\n      <td>17-17-17</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>35</td>\n      <td>62</td>\n      <td>54</td>\n      <td>Sandy</td>\n      <td>Barley</td>\n      <td>39</td>\n      <td>12</td>\n      <td>4</td>\n      <td>10-26-26</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>35</td>\n      <td>58</td>\n      <td>43</td>\n      <td>Red</td>\n      <td>Paddy</td>\n      <td>37</td>\n      <td>2</td>\n      <td>16</td>\n      <td>DAP</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":108},{"cell_type":"code","source":"train_df.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-11T14:16:38.309969Z","iopub.execute_input":"2025-06-11T14:16:38.310317Z","iopub.status.idle":"2025-06-11T14:16:38.487369Z","shell.execute_reply.started":"2025-06-11T14:16:38.310294Z","shell.execute_reply":"2025-06-11T14:16:38.486432Z"}},"outputs":[{"execution_count":109,"output_type":"execute_result","data":{"text/plain":"         Temparature       Humidity       Moisture       Nitrogen  \\\ncount  750000.000000  750000.000000  750000.000000  750000.000000   \nmean       31.503565      61.038912      45.184147      23.093808   \nstd         4.025574       6.647695      11.794594      11.216125   \nmin        25.000000      50.000000      25.000000       4.000000   \n25%        28.000000      55.000000      35.000000      13.000000   \n50%        32.000000      61.000000      45.000000      23.000000   \n75%        35.000000      67.000000      55.000000      33.000000   \nmax        38.000000      72.000000      65.000000      42.000000   \n\n           Potassium    Phosphorous  \ncount  750000.000000  750000.000000  \nmean        9.478296      21.073227  \nstd         5.765622      12.346831  \nmin         0.000000       0.000000  \n25%         4.000000      10.000000  \n50%         9.000000      21.000000  \n75%        14.000000      32.000000  \nmax        19.000000      42.000000  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Temparature</th>\n      <th>Humidity</th>\n      <th>Moisture</th>\n      <th>Nitrogen</th>\n      <th>Potassium</th>\n      <th>Phosphorous</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>750000.000000</td>\n      <td>750000.000000</td>\n      <td>750000.000000</td>\n      <td>750000.000000</td>\n      <td>750000.000000</td>\n      <td>750000.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>31.503565</td>\n      <td>61.038912</td>\n      <td>45.184147</td>\n      <td>23.093808</td>\n      <td>9.478296</td>\n      <td>21.073227</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>4.025574</td>\n      <td>6.647695</td>\n      <td>11.794594</td>\n      <td>11.216125</td>\n      <td>5.765622</td>\n      <td>12.346831</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>25.000000</td>\n      <td>50.000000</td>\n      <td>25.000000</td>\n      <td>4.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>28.000000</td>\n      <td>55.000000</td>\n      <td>35.000000</td>\n      <td>13.000000</td>\n      <td>4.000000</td>\n      <td>10.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>32.000000</td>\n      <td>61.000000</td>\n      <td>45.000000</td>\n      <td>23.000000</td>\n      <td>9.000000</td>\n      <td>21.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>35.000000</td>\n      <td>67.000000</td>\n      <td>55.000000</td>\n      <td>33.000000</td>\n      <td>14.000000</td>\n      <td>32.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>38.000000</td>\n      <td>72.000000</td>\n      <td>65.000000</td>\n      <td>42.000000</td>\n      <td>19.000000</td>\n      <td>42.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":109},{"cell_type":"markdown","source":"## Preprocessing","metadata":{}},{"cell_type":"code","source":"# Preprocess the data\nX = train_df.drop(columns='Fertilizer Name')\ny = train_df['Fertilizer Name']\nX_test = test_df.copy()\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-11T14:16:39.121157Z","iopub.execute_input":"2025-06-11T14:16:39.121522Z","iopub.status.idle":"2025-06-11T14:16:39.148096Z","shell.execute_reply.started":"2025-06-11T14:16:39.121499Z","shell.execute_reply":"2025-06-11T14:16:39.147126Z"}},"outputs":[],"execution_count":110},{"cell_type":"code","source":"# Encode labels to integers\nle = LabelEncoder()\ny_encoded = le.fit_transform(y)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-11T14:16:39.149547Z","iopub.execute_input":"2025-06-11T14:16:39.149888Z","iopub.status.idle":"2025-06-11T14:16:39.296679Z","shell.execute_reply.started":"2025-06-11T14:16:39.149865Z","shell.execute_reply":"2025-06-11T14:16:39.295788Z"}},"outputs":[],"execution_count":111},{"cell_type":"code","source":"# One-hot encode categorical variables\nX_full = pd.concat([X, X_test], axis=0)\nX_full_encoded = pd.get_dummies(X_full)\nX_encoded = X_full_encoded.iloc[:len(X)]\nX_test_encoded = X_full_encoded.iloc[len(X):]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-11T14:16:40.046513Z","iopub.execute_input":"2025-06-11T14:16:40.046817Z","iopub.status.idle":"2025-06-11T14:16:40.310655Z","shell.execute_reply.started":"2025-06-11T14:16:40.046796Z","shell.execute_reply":"2025-06-11T14:16:40.309907Z"}},"outputs":[],"execution_count":112},{"cell_type":"code","source":"# Validation split\nX_train, X_val, y_train, y_val = train_test_split(X_encoded, y_encoded, test_size=0.2, random_state=42)  # Should output integers starting from 0","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-11T14:16:40.316757Z","iopub.execute_input":"2025-06-11T14:16:40.317034Z","iopub.status.idle":"2025-06-11T14:16:40.455118Z","shell.execute_reply.started":"2025-06-11T14:16:40.317015Z","shell.execute_reply":"2025-06-11T14:16:40.454050Z"}},"outputs":[],"execution_count":113},{"cell_type":"code","source":"# Train XGB model\nmodel = XGBClassifier(\n    n_estimators=100,\n    learning_rate=0.1,\n    max_depth=6,\n    use_label_encoder=False,\n    eval_metric='mlogloss',\n    objective='multi:softprob',\n    num_class=len(le.classes_),\n    random_state=42\n)\nmodel.fit(X_train, y_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-11T14:16:40.909485Z","iopub.execute_input":"2025-06-11T14:16:40.909831Z","iopub.status.idle":"2025-06-11T14:17:09.175335Z","shell.execute_reply.started":"2025-06-11T14:16:40.909806Z","shell.execute_reply":"2025-06-11T14:17:09.174440Z"}},"outputs":[{"execution_count":114,"output_type":"execute_result","data":{"text/plain":"XGBClassifier(base_score=None, booster=None, callbacks=None,\n              colsample_bylevel=None, colsample_bynode=None,\n              colsample_bytree=None, device=None, early_stopping_rounds=None,\n              enable_categorical=False, eval_metric='mlogloss',\n              feature_types=None, gamma=None, grow_policy=None,\n              importance_type=None, interaction_constraints=None,\n              learning_rate=0.1, max_bin=None, max_cat_threshold=None,\n              max_cat_to_onehot=None, max_delta_step=None, max_depth=6,\n              max_leaves=None, min_child_weight=None, missing=nan,\n              monotone_constraints=None, multi_strategy=None, n_estimators=100,\n              n_jobs=None, num_class=7, num_parallel_tree=None, ...)","text/html":"<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n              colsample_bylevel=None, colsample_bynode=None,\n              colsample_bytree=None, device=None, early_stopping_rounds=None,\n              enable_categorical=False, eval_metric=&#x27;mlogloss&#x27;,\n              feature_types=None, gamma=None, grow_policy=None,\n              importance_type=None, interaction_constraints=None,\n              learning_rate=0.1, max_bin=None, max_cat_threshold=None,\n              max_cat_to_onehot=None, max_delta_step=None, max_depth=6,\n              max_leaves=None, min_child_weight=None, missing=nan,\n              monotone_constraints=None, multi_strategy=None, n_estimators=100,\n              n_jobs=None, num_class=7, num_parallel_tree=None, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n              colsample_bylevel=None, colsample_bynode=None,\n              colsample_bytree=None, device=None, early_stopping_rounds=None,\n              enable_categorical=False, eval_metric=&#x27;mlogloss&#x27;,\n              feature_types=None, gamma=None, grow_policy=None,\n              importance_type=None, interaction_constraints=None,\n              learning_rate=0.1, max_bin=None, max_cat_threshold=None,\n              max_cat_to_onehot=None, max_delta_step=None, max_depth=6,\n              max_leaves=None, min_child_weight=None, missing=nan,\n              monotone_constraints=None, multi_strategy=None, n_estimators=100,\n              n_jobs=None, num_class=7, num_parallel_tree=None, ...)</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":114},{"cell_type":"code","source":"# Get top 3 predictions\nval_probs = model.predict_proba(X_val)\ntest_probs = model.predict_proba(X_test_encoded)\n\nval_top3_idx = val_probs.argsort(axis=1)[:, -3:][:, ::-1]\ntest_top3_idx = test_probs.argsort(axis=1)[:, -3:][:, ::-1]\n\nval_top3_labels = le.inverse_transform(val_top3_idx.ravel()).reshape(val_top3_idx.shape)\ntest_top3_labels = le.inverse_transform(test_top3_idx.ravel()).reshape(test_top3_idx.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-11T14:17:09.176143Z","iopub.execute_input":"2025-06-11T14:17:09.176365Z","iopub.status.idle":"2025-06-11T14:17:12.772234Z","shell.execute_reply.started":"2025-06-11T14:17:09.176348Z","shell.execute_reply":"2025-06-11T14:17:12.771391Z"}},"outputs":[],"execution_count":115},{"cell_type":"code","source":"# Evaluate validation accuracy\ntop3_val_score = top_k_accuracy_score(y_val, val_probs, k=3)\nprint(\"Top-3 Validation Accuracy:\", top3_val_score)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-11T14:17:12.773364Z","iopub.execute_input":"2025-06-11T14:17:12.773668Z","iopub.status.idle":"2025-06-11T14:17:12.816602Z","shell.execute_reply.started":"2025-06-11T14:17:12.773642Z","shell.execute_reply":"2025-06-11T14:17:12.815653Z"}},"outputs":[{"name":"stdout","text":"Top-3 Validation Accuracy: 0.50354\n","output_type":"stream"}],"execution_count":116},{"cell_type":"code","source":"# Save test predictions\nsubmission = pd.DataFrame({\n    'id': test_csv['id'],\n    'Fertilizer Name': [' '.join(row) for row in test_top3_labels]\n})\nsubmission.to_csv(\"submission.csv\", index=False)\nsubmission.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-11T14:22:31.534998Z","iopub.execute_input":"2025-06-11T14:22:31.535357Z","iopub.status.idle":"2025-06-11T14:22:32.286525Z","shell.execute_reply.started":"2025-06-11T14:22:31.535333Z","shell.execute_reply":"2025-06-11T14:22:32.285410Z"}},"outputs":[{"execution_count":122,"output_type":"execute_result","data":{"text/plain":"       id          Fertilizer Name\n0  750000          DAP 28-28 20-20\n1  750001  17-17-17 20-20 10-26-26\n2  750002  20-20 10-26-26 14-35-14\n3  750003   14-35-14 17-17-17 Urea\n4  750004  20-20 17-17-17 10-26-26","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>Fertilizer Name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>750000</td>\n      <td>DAP 28-28 20-20</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>750001</td>\n      <td>17-17-17 20-20 10-26-26</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>750002</td>\n      <td>20-20 10-26-26 14-35-14</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>750003</td>\n      <td>14-35-14 17-17-17 Urea</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>750004</td>\n      <td>20-20 17-17-17 10-26-26</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":122},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}